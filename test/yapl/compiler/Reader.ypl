package yapl.compiler

class Reader(val source: String) {
	var offset: Number = 0
	var line: Number = 1
	var column: Number = 0

	fun peek() -> Char | null = if this->eof() then null else this->source[this->offset]

	fun next() -> Char | null = if this->eof() then null else {
		val result = this->peek()
		this->offset = this->offset + 1
		result
	}

	fun eof() -> Boolean = this->offset >= source->length
	fun eol() -> Boolean = peek() == "\n" or peek() == "\r"

	fun take(char: Char) -> Boolean = if this->peek() == char then {
		this->next()
		true
	} else false

	fun takeIf(condition: Function) -> Char | Null = if condition(this->peek()) then this->next() else null

	fun takeWhile(condition: Function) -> String {
		var result = ""
		while (val char = this->takeIf(condition)) != null do result = result ~ char
		result
	}

	fun readMaybeEscaped -> Char {
		val c = this->next()
		if c == '\\' then {
			val underEscape = this->next()
			if underEscape == '0' then '\0'
			else if underEscape == 'n' then '\n'
			else if underEscape == 't' then '\t'
			else underEscape
		} else c
	}
}
